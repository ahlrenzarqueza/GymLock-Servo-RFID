"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const DEFAULT_CONVERT = (value) => {
    return value;
};
const DEFAULT_REGEXP = /[\S\s]*/i;
/**
 * 类型
 */
class Type {
    constructor(options) {
        this.options = options;
        options = options || {};
        this.name = options.name;
        this.regexp = options.regexp || DEFAULT_REGEXP;
        this.default = options.default || "";
        this.covert = options.convert || DEFAULT_CONVERT;
        this.greed = options.greed || false;
    }
}
exports.Type = Type;
/**
 * 类型集合
 */
class TypeCollection extends Array {
    get(name) {
        return this.filter(item => {
            return item.name === name;
        })[0];
    }
}
exports.TypeCollection = TypeCollection;
/**
 * 内建类型
 */
exports.builtInTypes = new TypeCollection(new Type({
    name: "string"
}), new Type({
    name: "string*",
    greed: true
}), new Type({
    name: "number",
    regexp: /^[0-9]*$/i,
    default: 0,
    convert: Number
}), new Type({
    name: "boolean",
    regexp: /^(1|0|true|false|yes|no){1}$/i,
    default: true,
    convert(str) {
        return ["1", "true", "yes"].indexOf(str) > -1;
    }
}), new Type({
    name: "switch",
    regexp: /^$/i,
    default: true
}));
