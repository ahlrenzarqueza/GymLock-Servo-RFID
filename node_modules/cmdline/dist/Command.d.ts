import { ActionHandler, ActionList, ActionRequried } from "./Action";
import { ArgumentList } from "./Argument";
import { OptionList } from "./Option";
import { Type } from "./Type";
/**
 * 定义命令行参数解析器
 */
export declare class Command {
    /**
     * 允许的匹配的命令或正则表达式
     */
    names: (string | RegExp)[];
    /**
     * 父级命令
     */
    parent: Command;
    /**
     * 根命令
     */
    root: Command;
    /**
     * 可用选项列表
     */
    optionList: OptionList;
    /**
     * 可用子命令列表
     */
    commandList: CommandList;
    /**
     * 可用动作列表
     */
    actionList: ActionList;
    /**
     * 可用参数类型列表
     */
    argumentList: ArgumentList;
    /**
     * 控制台实例
     */
    logger: any;
    errorHandler: ActionHandler;
    helpHandler: ActionHandler;
    versionHandler: ActionHandler;
    private tokenList;
    private originArgv;
    /**
     * 当前命令名称
     */
    name: string;
    /**
     * 当前命令参数列表
     */
    argv: string[];
    /**
     * 当前选项 kev/value
     */
    options: any;
    /**
     * 当前命令参数个数
     */
    readonly argc: number;
    /**
     * 当前选项个数
     */
    readonly optionsCount: number;
    /**
     * 当前命令所有参数（argv & options & others）
     */
    params: any;
    /**
     * 构建函数
     */
    constructor(options?: any);
    /**
     * 是否是 root
     */
    isRoot(): boolean;
    /**
     * 定义子命令处理函数
     */
    command(names: string | RegExp | (string | RegExp)[]): Command;
    /**
     * 定义动作处理函数
     * @param handler 处理函数
     * - ActionHandler 的参数为 options 或 argv，执行时值将自动注入
     * @param required 匹配参数，如果指定必须满足才会执行 handler
     * - "*": 匹配任意参数，无论任何 options 或 argv 都将执行
     * - Array: 要求匹配 Array 指定的参数，只有数组中指定的参数存在才执行
     * - false: 强制不匹配任何参数，只有没有任何参数时才执行
     * - 省略: 将自动分析 ActionHandler 的参数，只有参数都在存时才执行
     * @returns
     * 如果返回 false ，将会阻止后续其他匹配的 ActionHandler 执行
     */
    action(handler: ActionHandler, required?: ActionRequried): this;
    /**
     * 选项
     */
    option(names: string | string[], type: Type | string): this;
    /**
     * 定义参数类型
     */
    arguments(...args: (Type | string)[]): this;
    /**
     * 错误处理
     */
    error(handler: ActionHandler): this;
    /**
     * 发出一个错误
     */
    private emitError;
    /**
     * 配置控制台实例
     */
    console(logger: any): this;
    /**
     * 检查子命令并开始解析
     */
    parse(originArgv: string[]): void | Promise<void>;
    /**
     * 开始解析
     */
    private _parseAndExc;
    /**
     * 就续并开始执行
     */
    ready(): void | Promise<void>;
    /**
     * 解析 Tokens, 目前主要处理组合短参数
     */
    private _parseTokens;
    /**
     * 解析 command
     */
    private _parseCommand;
    /**
     * 是否包含重复字符
     */
    private _hasRepeatChar;
    /**
     * 解析参数和选项
     */
    private _parseArgvAndOptions;
    /**
     * 转换选项结构
     */
    private _covertOptions;
    /**
     * 合并所有参数和选项及其它参数
     */
    private _mergeAllParams;
    /**
     * 解析注入参数
     */
    private _parseInjectArguments;
    /**
     * 调用一个处理函数
     */
    private _callAction;
    /**
     * 查找匹配的 handlers
     */
    private _findActions;
    /**
     * 在没有找到 handlers 时执行
     */
    private _noMatch;
    /**
     * 字符串或文件内容
     */
    private _strOrFile;
    /**
     * 添加「版本」选项
     */
    version(version: string | ActionHandler): this;
    /**
     * 添加「帮助」选项
     */
    help(help: string | ActionHandler): this;
    /**
     * 是否包含某一个参数或选项
     */
    has(name: string): any;
    /**
     * 获取一个参数或选项
     */
    get(name: string): any;
    /**
     * 更改一个参数或选项
     */
    set(name: string, value: any): this;
}
export declare class CommandList extends Array<Command> {
    get(name: string): Command;
}
